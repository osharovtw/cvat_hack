{"version":3,"file":"assets/3rdparty/Decoder.worker.68cdcc5c0bb246e8d633.js","mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,UAAU;;AAEV;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,iBAAiB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,2BAA2B;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oBAAoB,mBAAmB;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,qBAAqB,uBAAuB;AAC5C;AACA;AACA,sBAAsB,qBAAqB;AAC3C;AACA;;AAEA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoeAAe,oBAAoB;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB;;AAEnC;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB;;AAEnC;AACA;AACA,wBAAwB,2CAA2C;AACnE;AACA;;;AAGA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,CAAC;;;;;;;;UCt3BD;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://cvat-ui/./node_modules/cvat-core/node_modules/cvat-data/src/ts/3rdparty/Decoder.worker.js","webpack://cvat-ui/webpack/bootstrap","webpack://cvat-ui/webpack/before-startup","webpack://cvat-ui/webpack/startup","webpack://cvat-ui/webpack/after-startup"],"sourcesContent":["// universal module definition\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([], factory);\n    } else if (typeof exports === 'object') {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory();\n    } else {\n        // Browser globals (root is window)\n        root.Decoder = factory();\n    }\n}(this, function () {\n  \n  var global;\n  \n  function initglobal(){\n    global = this;\n    if (!global){\n      if (typeof window != \"undefined\"){\n        global = window;\n      }else if (typeof self != \"undefined\"){\n        global = self;\n      };\n    };\n  };\n  initglobal();\n  \n  \n  function error(message) {\n    console.error(message);\n    console.trace();\n  };\n\n  \n  function assert(condition, message) {\n    if (!condition) {\n      error(message);\n    };\n  };\n  \n  \n  \n  \n  var getModule = function(par_broadwayOnHeadersDecoded, par_broadwayOnPictureDecoded){\n    \n    \n    /*var ModuleX = {\n      'print': function(text) { console.log('stdout: ' + text); },\n      'printErr': function(text) { console.log('stderr: ' + text); }\n    };*/\n    \n    \n    /*\n    \n      The reason why this is all packed into one file is that this file can also function as worker.\n      you can integrate the file into your build system and provide the original file to be loaded into a worker.\n    \n    */\n    \n    //var Module = (function(){\n    \n    \nvar Module=typeof Module!==\"undefined\"?Module:{};var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram=\"./this.program\";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=true;var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(document.currentScript){scriptDirectory=document.currentScript.src}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf(\"/\")+1)}else{scriptDirectory=\"\"}{read_=function shell_read(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=function readBinary(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}setWindowTitle=function(title){document.title=title}}else{}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(Module[\"quit\"])quit_=Module[\"quit\"];var asm2wasmImports={\"f64-rem\":function(x,y){return x%y},\"debugger\":function(){}};var functionPointers=new Array(0);var wasmBinary;if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];var noExitRuntime;if(Module[\"noExitRuntime\"])noExitRuntime=Module[\"noExitRuntime\"];if(typeof WebAssembly!==\"object\"){err(\"no native wasm support detected\")}var wasmMemory;var wasmTable=new WebAssembly.Table({\"initial\":10,\"maximum\":10,\"element\":\"anyfunc\"});var ABORT=false;var EXITSTATUS=0;var UTF8Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf8\"):undefined;function UTF8ArrayToString(u8Array,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(u8Array[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&u8Array.subarray&&UTF8Decoder){return UTF8Decoder.decode(u8Array.subarray(idx,endPtr))}else{var str=\"\";while(idx<endPtr){var u0=u8Array[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=u8Array[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=u8Array[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|u8Array[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):\"\"}var UTF16Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf-16le\"):undefined;var WASM_PAGE_SIZE=65536;var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module[\"HEAP8\"]=HEAP8=new Int8Array(buf);Module[\"HEAP16\"]=HEAP16=new Int16Array(buf);Module[\"HEAP32\"]=HEAP32=new Int32Array(buf);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buf);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buf);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buf);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buf);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buf)}var DYNAMIC_BASE=5254064,DYNAMICTOP_PTR=10992;var INITIAL_TOTAL_MEMORY=Module[\"TOTAL_MEMORY\"]||104857600;if(Module[\"wasmMemory\"]){wasmMemory=Module[\"wasmMemory\"]}else{wasmMemory=new WebAssembly.Memory({\"initial\":INITIAL_TOTAL_MEMORY/WASM_PAGE_SIZE,\"maximum\":INITIAL_TOTAL_MEMORY/WASM_PAGE_SIZE})}if(wasmMemory){buffer=wasmMemory.buffer}INITIAL_TOTAL_MEMORY=buffer.byteLength;updateGlobalBufferAndViews(buffer);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback();continue}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){Module[\"dynCall_v\"](func)}else{Module[\"dynCall_vi\"](func,callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};function abort(what){if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}what+=\"\";out(what);err(what);ABORT=true;EXITSTATUS=1;what=\"abort(\"+what+\"). Build with -s ASSERTIONS=1 for more info.\";throw new WebAssembly.RuntimeError(what)}var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return String.prototype.startsWith?filename.startsWith(dataURIPrefix):filename.indexOf(dataURIPrefix)===0}var wasmBinaryFile=\"avc.wasm\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(){try{if(wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(wasmBinaryFile)}else{throw\"both async and sync fetching of the wasm failed\"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch===\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+wasmBinaryFile+\"'\"}return response[\"arrayBuffer\"]()}).catch(function(){return getBinary()})}return new Promise(function(resolve,reject){resolve(getBinary())})}function createWasm(){var info={\"env\":asmLibraryArg,\"wasi_unstable\":asmLibraryArg,\"global\":{\"NaN\":NaN,Infinity:Infinity},\"global.Math\":Math,\"asm2wasm\":asm2wasmImports};function receiveInstance(instance,module){var exports=instance.exports;Module[\"asm\"]=exports;removeRunDependency(\"wasm-instantiate\")}addRunDependency(\"wasm-instantiate\");function receiveInstantiatedSource(output){receiveInstance(output[\"instance\"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(receiver,function(reason){err(\"failed to asynchronously prepare wasm: \"+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming===\"function\"&&!isDataURI(wasmBinaryFile)&&typeof fetch===\"function\"){fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiatedSource,function(reason){err(\"wasm streaming compile failed: \"+reason);err(\"falling back to ArrayBuffer instantiation\");instantiateArrayBuffer(receiveInstantiatedSource)})})}else{return instantiateArrayBuffer(receiveInstantiatedSource)}}if(Module[\"instantiateWasm\"]){try{var exports=Module[\"instantiateWasm\"](info,receiveInstance);return exports}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);return false}}instantiateAsync();return{}}Module[\"asm\"]=createWasm;var PATH={splitPath:function(filename){var splitPathRe=/^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;return splitPathRe.exec(filename).slice(1)},normalizeArray:function(parts,allowAboveRoot){var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last===\".\"){parts.splice(i,1)}else if(last===\"..\"){parts.splice(i,1);up++}else if(up){parts.splice(i,1);up--}}if(allowAboveRoot){for(;up;up--){parts.unshift(\"..\")}}return parts},normalize:function(path){var isAbsolute=path.charAt(0)===\"/\",trailingSlash=path.substr(-1)===\"/\";path=PATH.normalizeArray(path.split(\"/\").filter(function(p){return!!p}),!isAbsolute).join(\"/\");if(!path&&!isAbsolute){path=\".\"}if(path&&trailingSlash){path+=\"/\"}return(isAbsolute?\"/\":\"\")+path},dirname:function(path){var result=PATH.splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return\".\"}if(dir){dir=dir.substr(0,dir.length-1)}return root+dir},basename:function(path){if(path===\"/\")return\"/\";var lastSlash=path.lastIndexOf(\"/\");if(lastSlash===-1)return path;return path.substr(lastSlash+1)},extname:function(path){return PATH.splitPath(path)[3]},join:function(){var paths=Array.prototype.slice.call(arguments,0);return PATH.normalize(paths.join(\"/\"))},join2:function(l,r){return PATH.normalize(l+\"/\"+r)}};var SYSCALLS={buffers:[null,[],[]],printChar:function(stream,curr){var buffer=SYSCALLS.buffers[stream];if(curr===0||curr===10){(stream===1?out:err)(UTF8ArrayToString(buffer,0));buffer.length=0}else{buffer.push(curr)}},varargs:0,get:function(varargs){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret},getStr:function(){var ret=UTF8ToString(SYSCALLS.get());return ret},get64:function(){var low=SYSCALLS.get(),high=SYSCALLS.get();return low},getZero:function(){SYSCALLS.get()}};function _fd_write(fd,iov,iovcnt,pnum){try{var num=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];for(var j=0;j<len;j++){SYSCALLS.printChar(fd,HEAPU8[ptr+j])}num+=len}HEAP32[pnum>>2]=num;return 0}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function ___wasi_fd_write(){return _fd_write.apply(null,arguments)}function _broadwayOnHeadersDecoded(){par_broadwayOnHeadersDecoded()}Module[\"_broadwayOnHeadersDecoded\"]=_broadwayOnHeadersDecoded;function _broadwayOnPictureDecoded($buffer,width,height){par_broadwayOnPictureDecoded($buffer,width,height)}Module[\"_broadwayOnPictureDecoded\"]=_broadwayOnPictureDecoded;function _emscripten_get_heap_size(){return HEAP8.length}function abortOnCannotGrowMemory(requestedSize){abort(\"OOM\")}function _emscripten_resize_heap(requestedSize){abortOnCannotGrowMemory(requestedSize)}function _emscripten_memcpy_big(dest,src,num){HEAPU8.set(HEAPU8.subarray(src,src+num),dest)}var asmGlobalArg={};var asmLibraryArg={\"g\":___wasi_fd_write,\"__memory_base\":1024,\"__table_base\":0,\"f\":_broadwayOnHeadersDecoded,\"e\":_broadwayOnPictureDecoded,\"b\":_emscripten_get_heap_size,\"d\":_emscripten_memcpy_big,\"a\":_emscripten_resize_heap,\"c\":abort,\"memory\":wasmMemory,\"table\":wasmTable};var asm=Module[\"asm\"](asmGlobalArg,asmLibraryArg,buffer);Module[\"asm\"]=asm;var _broadwayCreateStream=Module[\"_broadwayCreateStream\"]=function(){return Module[\"asm\"][\"h\"].apply(null,arguments)};var _broadwayExit=Module[\"_broadwayExit\"]=function(){return Module[\"asm\"][\"i\"].apply(null,arguments)};var _broadwayGetMajorVersion=Module[\"_broadwayGetMajorVersion\"]=function(){return Module[\"asm\"][\"j\"].apply(null,arguments)};var _broadwayGetMinorVersion=Module[\"_broadwayGetMinorVersion\"]=function(){return Module[\"asm\"][\"k\"].apply(null,arguments)};var _broadwayInit=Module[\"_broadwayInit\"]=function(){return Module[\"asm\"][\"l\"].apply(null,arguments)};var _broadwayPlayStream=Module[\"_broadwayPlayStream\"]=function(){return Module[\"asm\"][\"m\"].apply(null,arguments)};Module[\"asm\"]=asm;var calledRun;dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0)return;function doRun(){if(calledRun)return;calledRun=true;if(ABORT)return;initRuntime();preMain();if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}}Module[\"run\"]=run;if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}noExitRuntime=true;run();\n    //   return Module;\n    //})();\n    \n    var resultModule;\n    if (typeof global !== \"undefined\"){\n      if (global.Module){\n        resultModule = global.Module;\n      };\n    };\n    if (typeof Module != \"undefined\"){\n      resultModule = Module;\n    };\n\n    resultModule._broadwayOnHeadersDecoded = par_broadwayOnHeadersDecoded;\n    resultModule._broadwayOnPictureDecoded = par_broadwayOnPictureDecoded;\n    \n    var moduleIsReady = false;\n    var cbFun;\n    var moduleReady = function(){\n      moduleIsReady = true;\n      if (cbFun){\n        cbFun(resultModule);\n      }\n    };\n    \n    resultModule.onRuntimeInitialized = function(){\n      moduleReady(resultModule);\n    };\n    return function(callback){\n      if (moduleIsReady){\n        callback(resultModule);\n      }else{\n        cbFun = callback;\n      };\n    };\n  };\n\n  return (function(){\n    \"use strict\";\n  \n  \n  var nowValue = function(){\n    return (new Date()).getTime();\n  };\n  \n  if (typeof performance != \"undefined\"){\n    if (performance.now){\n      nowValue = function(){\n        return performance.now();\n      };\n    };\n  };\n  \n  \n  var Decoder = function(parOptions){\n    this.options = parOptions || {};\n    \n    this.now = nowValue;\n    \n    var asmInstance;\n    \n    var fakeWindow = {\n    };\n    \n    var toU8Array;\n    var toU32Array;\n    \n    var onPicFun = function ($buffer, width, height) {\n      var buffer = this.pictureBuffers[$buffer];\n      if (!buffer) {\n        buffer = this.pictureBuffers[$buffer] = toU8Array($buffer, (width * height * 3) / 2);\n      };\n      \n      var infos;\n      var doInfo = false;\n      if (this.infoAr.length){\n        doInfo = true;\n        infos = this.infoAr;\n      };\n      this.infoAr = [];\n      \n      if (this.options.rgb){\n        if (!asmInstance){\n          asmInstance = getAsm(width, height);\n        };\n        asmInstance.inp.set(buffer);\n        asmInstance.doit();\n\n        var copyU8 = new Uint8Array(asmInstance.outSize);\n        copyU8.set( asmInstance.out );\n        \n        if (doInfo){\n          infos[0].finishDecoding = nowValue();\n        };\n        \n        this.onPictureDecoded(copyU8, width, height, infos);\n        return;\n        \n      };\n      \n      if (doInfo){\n        infos[0].finishDecoding = nowValue();\n      };\n      this.onPictureDecoded(buffer, width, height, infos);\n    }.bind(this);\n    \n    var ignore = false;\n    \n    if (this.options.sliceMode){\n      onPicFun = function ($buffer, width, height, $sliceInfo) {\n        if (ignore){\n          return;\n        };\n        var buffer = this.pictureBuffers[$buffer];\n        if (!buffer) {\n          buffer = this.pictureBuffers[$buffer] = toU8Array($buffer, (width * height * 3) / 2);\n        };\n        var sliceInfo = this.pictureBuffers[$sliceInfo];\n        if (!sliceInfo) {\n          sliceInfo = this.pictureBuffers[$sliceInfo] = toU32Array($sliceInfo, 18);\n        };\n\n        var infos;\n        var doInfo = false;\n        if (this.infoAr.length){\n          doInfo = true;\n          infos = this.infoAr;\n        };\n        this.infoAr = [];\n\n        /*if (this.options.rgb){\n        \n        no rgb in slice mode\n\n        };*/\n\n        infos[0].finishDecoding = nowValue();\n        var sliceInfoAr = [];\n        for (var i = 0; i < 20; ++i){\n          sliceInfoAr.push(sliceInfo[i]);\n        };\n        infos[0].sliceInfoAr = sliceInfoAr;\n\n        this.onPictureDecoded(buffer, width, height, infos);\n      }.bind(this);\n    };\n    \n    var ModuleCallback = getModule.apply(fakeWindow, [function () {\n    }, onPicFun]);\n    \n\n    var MAX_STREAM_BUFFER_LENGTH = 1024 * 1024;\n    \n    var instance = this;\n    this.onPictureDecoded = function (buffer, width, height, infos) {\n\n    };\n    \n    this.onDecoderReady = function(){};\n    \n    var bufferedCalls = [];\n    this.decode = function decode(typedAr, parInfo, copyDoneFun) {\n      bufferedCalls.push([typedAr, parInfo, copyDoneFun]);\n    };\n    \n    ModuleCallback(function(Module){\n      var HEAP8 = Module.HEAP8;\n      var HEAPU8 = Module.HEAPU8;\n      var HEAP16 = Module.HEAP16;\n      var HEAP32 = Module.HEAP32;\n      // from old constructor\n      Module._broadwayInit();\n      \n      /**\n     * Creates a typed array from a HEAP8 pointer. \n     */\n      toU8Array = function(ptr, length) {\n        return HEAPU8.subarray(ptr, ptr + length);\n      };\n      toU32Array = function(ptr, length) {\n        //var tmp = HEAPU8.subarray(ptr, ptr + (length * 4));\n        return new Uint32Array(HEAPU8.buffer, ptr, length);\n      };\n      instance.streamBuffer = toU8Array(Module._broadwayCreateStream(MAX_STREAM_BUFFER_LENGTH), MAX_STREAM_BUFFER_LENGTH);\n      instance.pictureBuffers = {};\n      // collect extra infos that are provided with the nal units\n      instance.infoAr = [];\n\n      /**\n     * Decodes a stream buffer. This may be one single (unframed) NAL unit without the\n     * start code, or a sequence of NAL units with framing start code prefixes. This\n     * function overwrites stream buffer allocated by the codec with the supplied buffer.\n     */\n\n      var sliceNum = 0;\n      if (instance.options.sliceMode){\n        sliceNum = instance.options.sliceNum;\n\n        instance.decode = function decode(typedAr, parInfo, copyDoneFun) {\n          instance.infoAr.push(parInfo);\n          parInfo.startDecoding = nowValue();\n          var nals = parInfo.nals;\n          var i;\n          if (!nals){\n            nals = [];\n            parInfo.nals = nals;\n            var l = typedAr.length;\n            var foundSomething = false;\n            var lastFound = 0;\n            var lastStart = 0;\n            for (i = 0; i < l; ++i){\n              if (typedAr[i] === 1){\n                if (\n                  typedAr[i - 1] === 0 &&\n                  typedAr[i - 2] === 0\n                ){\n                  var startPos = i - 2;\n                  if (typedAr[i - 3] === 0){\n                    startPos = i - 3;\n                  };\n                  // its a nal;\n                  if (foundSomething){\n                    nals.push({\n                      offset: lastFound,\n                      end: startPos,\n                      type: typedAr[lastStart] & 31\n                    });\n                  };\n                  lastFound = startPos;\n                  lastStart = startPos + 3;\n                  if (typedAr[i - 3] === 0){\n                    lastStart = startPos + 4;\n                  };\n                  foundSomething = true;\n                };\n              };\n            };\n            if (foundSomething){\n              nals.push({\n                offset: lastFound,\n                end: i,\n                type: typedAr[lastStart] & 31\n              });\n            };\n          };\n\n          var currentSlice = 0;\n          var playAr;\n          var offset = 0;\n          for (i = 0; i < nals.length; ++i){\n            if (nals[i].type === 1 || nals[i].type === 5){\n              if (currentSlice === sliceNum){\n                playAr = typedAr.subarray(nals[i].offset, nals[i].end);\n                instance.streamBuffer[offset] = 0;\n                offset += 1;\n                instance.streamBuffer.set(playAr, offset);\n                offset += playAr.length;\n              };\n              currentSlice += 1;\n            }else{\n              playAr = typedAr.subarray(nals[i].offset, nals[i].end);\n              instance.streamBuffer[offset] = 0;\n              offset += 1;\n              instance.streamBuffer.set(playAr, offset);\n              offset += playAr.length;\n              Module._broadwayPlayStream(offset);\n              offset = 0;\n            };\n          };\n          copyDoneFun();\n          Module._broadwayPlayStream(offset);\n        };\n\n      }else{\n        instance.decode = function decode(typedAr, parInfo) {\n          // console.info(\"Decoding: \" + buffer.length);\n          // collect infos\n          if (parInfo){\n            instance.infoAr.push(parInfo);\n            parInfo.startDecoding = nowValue();\n          };\n\n          instance.streamBuffer.set(typedAr);\n          Module._broadwayPlayStream(typedAr.length);\n        };\n      };\n      \n      if (bufferedCalls.length){\n        var bi = 0;\n        for (bi = 0; bi < bufferedCalls.length; ++bi){\n          instance.decode(bufferedCalls[bi][0], bufferedCalls[bi][1], bufferedCalls[bi][2]);\n        };\n        bufferedCalls = [];\n      };\n      \n      instance.onDecoderReady(instance);\n\n    });\n  \n\n  };\n\n  \n  Decoder.prototype = {\n    \n  };\n  \n  \n  \n  \n  /*\n  \n    asm.js implementation of a yuv to rgb convertor\n    provided by @soliton4\n    \n    based on \n    http://www.wordsaretoys.com/2013/10/18/making-yuv-conversion-a-little-faster/\n  \n  */\n  \n  \n  // factory to create asm.js yuv -> rgb convertor for a given resolution\n  var asmInstances = {};\n  var getAsm = function(parWidth, parHeight){\n    var idStr = \"\" + parWidth + \"x\" + parHeight;\n    if (asmInstances[idStr]){\n      return asmInstances[idStr];\n    };\n\n    var lumaSize = parWidth * parHeight;\n    var chromaSize = (lumaSize|0) >> 2;\n\n    var inpSize = lumaSize + chromaSize + chromaSize;\n    var outSize = parWidth * parHeight * 4;\n    var cacheSize = Math.pow(2, 24) * 4;\n    var size = inpSize + outSize + cacheSize;\n\n    var chunkSize = Math.pow(2, 24);\n    var heapSize = chunkSize;\n    while (heapSize < size){\n      heapSize += chunkSize;\n    };\n    var heap = new ArrayBuffer(heapSize);\n\n    var res = asmFactory(global, {}, heap);\n    res.init(parWidth, parHeight);\n    asmInstances[idStr] = res;\n\n    res.heap = heap;\n    res.out = new Uint8Array(heap, 0, outSize);\n    res.inp = new Uint8Array(heap, outSize, inpSize);\n    res.outSize = outSize;\n\n    return res;\n  };\n\n\n  function asmFactory(stdlib, foreign, heap) {\n    \"use asm\";\n\n    var imul = stdlib.Math.imul;\n    var min = stdlib.Math.min;\n    var max = stdlib.Math.max;\n    var pow = stdlib.Math.pow;\n    var out = new stdlib.Uint8Array(heap);\n    var out32 = new stdlib.Uint32Array(heap);\n    var inp = new stdlib.Uint8Array(heap);\n    var mem = new stdlib.Uint8Array(heap);\n    var mem32 = new stdlib.Uint32Array(heap);\n\n    // for double algo\n    /*var vt = 1.370705;\n    var gt = 0.698001;\n    var gt2 = 0.337633;\n    var bt = 1.732446;*/\n\n    var width = 0;\n    var height = 0;\n    var lumaSize = 0;\n    var chromaSize = 0;\n    var inpSize = 0;\n    var outSize = 0;\n\n    var inpStart = 0;\n    var outStart = 0;\n\n    var widthFour = 0;\n\n    var cacheStart = 0;\n\n\n    function init(parWidth, parHeight){\n      parWidth = parWidth|0;\n      parHeight = parHeight|0;\n\n      var i = 0;\n      var s = 0;\n\n      width = parWidth;\n      widthFour = imul(parWidth, 4)|0;\n      height = parHeight;\n      lumaSize = imul(width|0, height|0)|0;\n      chromaSize = (lumaSize|0) >> 2;\n      outSize = imul(imul(width, height)|0, 4)|0;\n      inpSize = (((lumaSize + chromaSize)|0) + chromaSize)|0;\n\n      outStart = 0;\n      inpStart = (outStart + outSize)|0;\n      cacheStart = (inpStart + inpSize)|0;\n\n      // initializing memory (to be on the safe side)\n      s = ~~(+pow(+2, +24));\n      s = imul(s, 4)|0;\n\n      for (i = 0|0; ((i|0) < (s|0))|0; i = (i + 4)|0){\n        mem32[((cacheStart + i)|0) >> 2] = 0;\n      };\n    };\n\n    function doit(){\n      var ystart = 0;\n      var ustart = 0;\n      var vstart = 0;\n\n      var y = 0;\n      var yn = 0;\n      var u = 0;\n      var v = 0;\n\n      var o = 0;\n\n      var line = 0;\n      var col = 0;\n\n      var usave = 0;\n      var vsave = 0;\n\n      var ostart = 0;\n      var cacheAdr = 0;\n\n      ostart = outStart|0;\n\n      ystart = inpStart|0;\n      ustart = (ystart + lumaSize|0)|0;\n      vstart = (ustart + chromaSize)|0;\n\n      for (line = 0; (line|0) < (height|0); line = (line + 2)|0){\n        usave = ustart;\n        vsave = vstart;\n        for (col = 0; (col|0) < (width|0); col = (col + 2)|0){\n          y = inp[ystart >> 0]|0;\n          yn = inp[((ystart + width)|0) >> 0]|0;\n\n          u = inp[ustart >> 0]|0;\n          v = inp[vstart >> 0]|0;\n\n          cacheAdr = (((((y << 16)|0) + ((u << 8)|0))|0) + v)|0;\n          o = mem32[((cacheStart >> 2) + cacheAdr)|0]|0;\n          if (o){}else{\n            o = yuv2rgbcalc(y,u,v)|0;\n            mem32[((cacheStart >> 2) + cacheAdr)|0] = o|0;\n          };\n          mem32[ostart >> 2] = o;\n\n          cacheAdr = (((((yn << 16)|0) + ((u << 8)|0))|0) + v)|0;\n          o = mem32[((cacheStart >> 2) + cacheAdr)|0]|0;\n          if (o){}else{\n            o = yuv2rgbcalc(yn,u,v)|0;\n            mem32[((cacheStart >> 2) + cacheAdr)|0] = o|0;\n          };\n          mem32[((ostart + widthFour)|0) >> 2] = o;\n\n          //yuv2rgb5(y, u, v, ostart);\n          //yuv2rgb5(yn, u, v, (ostart + widthFour)|0);\n          ostart = (ostart + 4)|0;\n\n          // next step only for y. u and v stay the same\n          ystart = (ystart + 1)|0;\n          y = inp[ystart >> 0]|0;\n          yn = inp[((ystart + width)|0) >> 0]|0;\n\n          //yuv2rgb5(y, u, v, ostart);\n          cacheAdr = (((((y << 16)|0) + ((u << 8)|0))|0) + v)|0;\n          o = mem32[((cacheStart >> 2) + cacheAdr)|0]|0;\n          if (o){}else{\n            o = yuv2rgbcalc(y,u,v)|0;\n            mem32[((cacheStart >> 2) + cacheAdr)|0] = o|0;\n          };\n          mem32[ostart >> 2] = o;\n\n          //yuv2rgb5(yn, u, v, (ostart + widthFour)|0);\n          cacheAdr = (((((yn << 16)|0) + ((u << 8)|0))|0) + v)|0;\n          o = mem32[((cacheStart >> 2) + cacheAdr)|0]|0;\n          if (o){}else{\n            o = yuv2rgbcalc(yn,u,v)|0;\n            mem32[((cacheStart >> 2) + cacheAdr)|0] = o|0;\n          };\n          mem32[((ostart + widthFour)|0) >> 2] = o;\n          ostart = (ostart + 4)|0;\n\n          //all positions inc 1\n\n          ystart = (ystart + 1)|0;\n          ustart = (ustart + 1)|0;\n          vstart = (vstart + 1)|0;\n        };\n        ostart = (ostart + widthFour)|0;\n        ystart = (ystart + width)|0;\n\n      };\n\n    };\n\n    function yuv2rgbcalc(y, u, v){\n      y = y|0;\n      u = u|0;\n      v = v|0;\n\n      var r = 0;\n      var g = 0;\n      var b = 0;\n\n      var o = 0;\n\n      var a0 = 0;\n      var a1 = 0;\n      var a2 = 0;\n      var a3 = 0;\n      var a4 = 0;\n\n      a0 = imul(1192, (y - 16)|0)|0;\n      a1 = imul(1634, (v - 128)|0)|0;\n      a2 = imul(832, (v - 128)|0)|0;\n      a3 = imul(400, (u - 128)|0)|0;\n      a4 = imul(2066, (u - 128)|0)|0;\n\n      r = (((a0 + a1)|0) >> 10)|0;\n      g = (((((a0 - a2)|0) - a3)|0) >> 10)|0;\n      b = (((a0 + a4)|0) >> 10)|0;\n\n      if ((((r & 255)|0) != (r|0))|0){\n        r = min(255, max(0, r|0)|0)|0;\n      };\n      if ((((g & 255)|0) != (g|0))|0){\n        g = min(255, max(0, g|0)|0)|0;\n      };\n      if ((((b & 255)|0) != (b|0))|0){\n        b = min(255, max(0, b|0)|0)|0;\n      };\n\n      o = 255;\n      o = (o << 8)|0;\n      o = (o + b)|0;\n      o = (o << 8)|0;\n      o = (o + g)|0;\n      o = (o << 8)|0;\n      o = (o + r)|0;\n\n      return o|0;\n\n    };\n\n\n\n    return {\n      init: init,\n      doit: doit\n    };\n  };\n\n  \n  /*\n    potential worker initialization\n  \n  */\n  \n  \n  if (typeof self != \"undefined\"){\n    var isWorker = false;\n    var decoder;\n    var reuseMemory = false;\n    var sliceMode = false;\n    var sliceNum = 0;\n    var sliceCnt = 0;\n    var lastSliceNum = 0;\n    var sliceInfoAr;\n    var lastBuf;\n    var awaiting = 0;\n    var pile = [];\n    var startDecoding;\n    var finishDecoding;\n    var timeDecoding;\n    \n    var memAr = [];\n    var getMem = function(length){\n      if (memAr.length){\n        var u = memAr.shift();\n        while (u && u.byteLength !== length){\n          u = memAr.shift();\n        };\n        if (u){\n          return u;\n        };\n      };\n      return new ArrayBuffer(length);\n    }; \n    \n    var copySlice = function(source, target, infoAr, width, height){\n      \n      var length = width * height;\n      var length4 = length / 4\n      var plane2 = length;\n      var plane3 = length + length4;\n      \n      var copy16 = function(parBegin, parEnd){\n        var i = 0;\n        for (i = 0; i < 16; ++i){\n          var begin = parBegin + (width * i);\n          var end = parEnd + (width * i)\n          target.set(source.subarray(begin, end), begin);\n        };\n      };\n      var copy8 = function(parBegin, parEnd){\n        var i = 0;\n        for (i = 0; i < 8; ++i){\n          var begin = parBegin + ((width / 2) * i);\n          var end = parEnd + ((width / 2) * i)\n          target.set(source.subarray(begin, end), begin);\n        };\n      };\n      var copyChunk = function(begin, end){\n        target.set(source.subarray(begin, end), begin);\n      };\n      \n      var begin = infoAr[0];\n      var end = infoAr[1];\n      if (end > 0){\n        copy16(begin, end);\n        copy8(infoAr[2], infoAr[3]);\n        copy8(infoAr[4], infoAr[5]);\n      };\n      begin = infoAr[6];\n      end = infoAr[7];\n      if (end > 0){\n        copy16(begin, end);\n        copy8(infoAr[8], infoAr[9]);\n        copy8(infoAr[10], infoAr[11]);\n      };\n      \n      begin = infoAr[12];\n      end = infoAr[15];\n      if (end > 0){\n        copyChunk(begin, end);\n        copyChunk(infoAr[13], infoAr[16]);\n        copyChunk(infoAr[14], infoAr[17]);\n      };\n      \n    };\n    \n    var sliceMsgFun = function(){};\n    \n    var setSliceCnt = function(parSliceCnt){\n      sliceCnt = parSliceCnt;\n      lastSliceNum = sliceCnt - 1;\n    };\n    \n    \n    self.addEventListener('message', function(e) {\n      \n      if (isWorker){\n        if (reuseMemory){\n          if (e.data.reuse){\n            memAr.push(e.data.reuse);\n          };\n        };\n        if (e.data.buf){\n          if (sliceMode && awaiting !== 0){\n            pile.push(e.data);\n          }else{\n            decoder.decode(\n              new Uint8Array(e.data.buf, e.data.offset || 0, e.data.length), \n              e.data.info, \n              function(){\n                if (sliceMode && sliceNum !== lastSliceNum){\n                  postMessage(e.data, [e.data.buf]);\n                };\n              }\n            );\n          };\n          return;\n        };\n        \n        if (e.data.slice){\n          // update ref pic\n          var copyStart = nowValue();\n          copySlice(new Uint8Array(e.data.slice), lastBuf, e.data.infos[0].sliceInfoAr, e.data.width, e.data.height);\n          // is it the one? then we need to update it\n          if (e.data.theOne){\n            copySlice(lastBuf, new Uint8Array(e.data.slice), sliceInfoAr, e.data.width, e.data.height);\n            if (timeDecoding > e.data.infos[0].timeDecoding){\n              e.data.infos[0].timeDecoding = timeDecoding;\n            };\n            e.data.infos[0].timeCopy += (nowValue() - copyStart);\n          };\n          // move on\n          postMessage(e.data, [e.data.slice]);\n          \n          // next frame in the pipe?\n          awaiting -= 1;\n          if (awaiting === 0 && pile.length){\n            var data = pile.shift();\n            decoder.decode(\n              new Uint8Array(data.buf, data.offset || 0, data.length), \n              data.info, \n              function(){\n                if (sliceMode && sliceNum !== lastSliceNum){\n                  postMessage(data, [data.buf]);\n                };\n              }\n            );\n          };\n          return;\n        };\n        \n        if (e.data.setSliceCnt){\n          setSliceCnt(e.data.sliceCnt);\n          return;\n        };\n        \n      }else{\n        if (e.data && e.data.type === \"Broadway.js - Worker init\"){\n          isWorker = true;\n          decoder = new Decoder(e.data.options);\n          \n          if (e.data.options.sliceMode){\n            reuseMemory = true;\n            sliceMode = true;\n            sliceNum = e.data.options.sliceNum;\n            setSliceCnt(e.data.options.sliceCnt);\n\n            decoder.onPictureDecoded = function (buffer, width, height, infos) {\n              \n              // buffer needs to be copied because we give up ownership\n              var copyU8 = new Uint8Array(getMem(buffer.length));\n              copySlice(buffer, copyU8, infos[0].sliceInfoAr, width, height);\n              \n              startDecoding = infos[0].startDecoding;\n              finishDecoding = infos[0].finishDecoding;\n              timeDecoding = finishDecoding - startDecoding;\n              infos[0].timeDecoding = timeDecoding;\n              infos[0].timeCopy = 0;\n              \n              postMessage({\n                slice: copyU8.buffer,\n                sliceNum: sliceNum,\n                width: width, \n                height: height, \n                infos: infos\n              }, [copyU8.buffer]); // 2nd parameter is used to indicate transfer of ownership\n              \n              awaiting = sliceCnt - 1;\n              \n              lastBuf = buffer;\n              sliceInfoAr = infos[0].sliceInfoAr;\n\n            };\n            \n          }else if (e.data.options.reuseMemory){\n            reuseMemory = true;\n            decoder.onPictureDecoded = function (buffer, width, height, infos) {\n              \n              // buffer needs to be copied because we give up ownership\n              var copyU8 = new Uint8Array(getMem(buffer.length));\n              copyU8.set( buffer, 0, buffer.length );\n\n              postMessage({\n                buf: copyU8.buffer, \n                length: buffer.length,\n                width: width, \n                height: height, \n                infos: infos\n              }, [copyU8.buffer]); // 2nd parameter is used to indicate transfer of ownership\n\n            };\n            \n          }else{\n            decoder.onPictureDecoded = function (buffer, width, height, infos) {\n              if (buffer) {\n                buffer = new Uint8Array(buffer);\n              };\n\n              // buffer needs to be copied because we give up ownership\n              var copyU8 = new Uint8Array(buffer.length);\n              copyU8.set( buffer, 0, buffer.length );\n\n              postMessage({\n                buf: copyU8.buffer, \n                length: buffer.length,\n                width: width, \n                height: height, \n                infos: infos\n              }, [copyU8.buffer]); // 2nd parameter is used to indicate transfer of ownership\n\n            };\n          };\n          postMessage({ consoleLog: \"broadway worker initialized\" });\n        };\n      };\n\n\n    }, false);\n  };\n  \n  Decoder.nowValue = nowValue;\n  \n  return Decoder;\n  \n  })();\n  \n  \n}));\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./node_modules/cvat-core/node_modules/cvat-data/src/ts/3rdparty/Decoder.worker.js\");\n",""],"names":[],"sourceRoot":""}